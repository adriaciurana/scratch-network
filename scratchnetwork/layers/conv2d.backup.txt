def forward(self, inputs):
		super(Conv2D, self).forward(inputs)

		input = Misc.add_pad(inputs[0], pad=self.padding_size)
		self.values.input = Misc.im2col(input, kernel_size=self.kernel_size, stride=(1,1))
		input = np.reshape(self.values.input, [-1, 
					(self.in_size[0][0] - self.kernel_size[0] + 2*self.padding_size[0]) + 1, 
					(self.in_size[0][1] - self.kernel_size[1] + 2*self.padding_size[1]) + 1, 
					self.values.input.shape[1]])
		input = np.reshape(input[:, ::self.stride[0], ::self.stride[1], :], [-1, self.values.input.shape[1]])
		input = np.dot(input, self.weights.kernels)
		return np.reshape(input, [-1] + list(self.out_size))

		"""self.values.input = np.pad(inputs[0], [(0, 0), (self.padding_size[0], self.padding_size[0]), (self.padding_size[1], self.padding_size[1]), (0, 0)], mode='constant')
		out = np.zeros(shape=[self.values.input.shape[0]] + list(self.out_size))
		for i in range(self.out_size[0]):
			for j in range(self.out_size[1]):
				iin = i*self.stride[0]
				jin = j*self.stride[1]
				
				out[:, i, j] = np.dot( \
					np.reshape(self.values.input[:, iin:(iin + self.kernel_size[0]), jin:(jin + self.kernel_size[1]), :], [-1] + [self.weights.kernels.shape[0]]), \
					self.weights.kernels)
		return out"""

	def derivatives(self, doutput):
		#input = Misc.im2col(self.values.input, kernel_size=self.kernel_size, stride=(1,1))
		doutput_reshape = np.reshape(doutput, [-1] + list(self.out_size))
		dout_strided = np.zeros(shape=(doutput.shape[0], self.out_size[0] * self.stride[0], self.out_size[1] * self.stride[1], self.out_size[2]))
		dout_strided[:, ::self.stride[0], ::self.stride[1], :] = doutput_reshape
		dout_mat = np.reshape(dout_strided, [-1, self.num_filters])
		dw = np.dot(np.transpose(self.values.input), dout_mat)
		dw = np.reshape(np.dot(np.transpose(self.values.input), dout_mat), list(self.weights.kernels.shape))
		
		dx = np.reshape(np.dot(dout_mat, np.transpose(self.weights.kernels)), 
			[-1] + [np.prod(self.out_size)] + list(self.weights.kernels.shape))
		dx = np.sum(dx, axis=1)
		# falta aumentar stride
		dx = np.reshape(dx, [-1] + list(self.in_size[0]))
		dx = Misc.inv_pad(dx, pad=self.padding_size)
		return dx, dw
